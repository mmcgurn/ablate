name: Build the latest ABLATE as a docker image

on:
  push:
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
env:
  IMAGE_NAME: ablate

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: [ { runson: ARM64, id: -arm64 }, { runson: ubuntu-latest, id: -amd64 } ]
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]
    runs-on: ${{ matrix.arch.runson }}
    timeout-minutes: 90

    steps:
      - name: GitHub Tag Name example
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Get the version from tag
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Building ABLATE
        run: |
          # define the image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{ matrix.indices.id}}${{matrix.arch.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo IMAGE_ID=$IMAGE_ID

          # get the dependency name
          ABLATE_DEPENDENCY_IMAGE=ghcr.io/ubchrest/ablate/ablate-dependencies${{matrix.compiler.id}}${{matrix.indices.id}}:latest

          # build and push
          echo "Building Version ${{ env.VERSION }}"
          docker buildx build .\
            --file Dockerfile \
            --tag $IMAGE_ID:${{ env.VERSION }} \
            --build-arg PETSC_BUILD_ARCH='${{ matrix.petscConfig }}' \
            --build-arg ENABLE_TENSOR_FLOW='${{ matrix.tensorFlowConfig }}' \
            --build-arg ABLATE_DEPENDENCY_IMAGE=$ABLATE_DEPENDENCY_IMAGE \
            --push 


  # Push the latest tag if everything build
  # Note: this does not run on multiple archs because it combines the multiple arches into a single manifest
  push-latest:
    needs: [ build ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Get the version from tag
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Run Test image
        run: |
          # Define the base image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{ matrix.indices.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          # build a manifest file for this version
          docker manifest create \
            $IMAGE_ID:${{ needs.get-version.outputs.petsc_commit}} \
            --amend $IMAGE_ID-arm64:${{ env.VERSION }} \
            --amend $IMAGE_ID-amd64:${{ env.VERSION }} 
          # push
          docker manifest push $IMAGE_ID:${{ env.VERSION }}
          
          # tag as latest
          docker manifest create \
            $IMAGE_ID:latest \
            --amend $IMAGE_ID-arm64:${{ env.VERSION }} \
            --amend $IMAGE_ID-amd64:${{ env.VERSION }} 
          
          # push
          docker manifest push $IMAGE_ID:latest